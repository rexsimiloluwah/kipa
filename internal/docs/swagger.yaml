basePath: /api/v1
definitions:
  dto.CreateUserInputDTO:
    properties:
      email:
        example: me@gmail.com
        type: string
      firstname:
        example: Similoluwa
        type: string
      lastname:
        example: Okunowo
        type: string
      password:
        example: '********'
        type: string
      username:
        example: ""
        type: string
    type: object
  dto.LoginUserInputDTO:
    properties:
      email:
        example: me@gmail.com
        type: string
      password:
        example: '********'
        type: string
    type: object
  dto.UpdateUserInputDTO:
    properties:
      email:
        example: me@gmail.com
        type: string
      firstname:
        example: Similoluwa
        type: string
      lastname:
        example: Okunowo
        type: string
      username:
        example: ""
        type: string
    type: object
  dto.UpdateUserPasswordInputDTO:
    properties:
      password:
        example: '********'
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
      status:
        type: boolean
    type: object
  models.SuccessResponse:
    properties:
      data:
        type: string
      message:
        type: string
      status:
        type: boolean
    type: object
host: localhost:5050
info:
  contact:
    email: support@swagger.io
    name: Similoluwa Okunowo
    url: http://www.swagger.io/support
  description: API Documentation for Kipa - your secure & serverless key/value store
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Kipa
  version: 0.1.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login an existing user, returns the access and refresh tokens
      parameters:
      - description: User Login Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.LoginUserInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login user
      tags:
      - Auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes a user's access token
      parameters:
      - description: Refresh token
        in: header
        name: x-refresh-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Refresh token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User Register Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register user
      tags:
      - Auth
  /auth/user:
    get:
      consumes:
      - application/json
      description: Returns the authenticated user decoded from the bearer token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Auth User
      tags:
      - Auth
  /user:
    delete:
      description: Delete a user's account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: DeleteUser
      tags:
      - User
    put:
      description: Update data for a user
      parameters:
      - description: Update User Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: UpdateUser
      tags:
      - User
  /user/password:
    put:
      description: Update a user's password
      parameters:
      - description: Update User Password Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserPasswordInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: UpdateUserPassword
      tags:
      - User
  /users:
    get:
      description: Returns users data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: GetAllUsers
      tags:
      - User
  /users/{userId}:
    get:
      description: Returns user data for the passed user ID
      parameters:
      - description: Video ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: GetUserByID
      tags:
      - User
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
